name: AHA-UAT-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the develop branch
  workflow_dispatch:
    # inputs:
    #   Tag_name:
    #     description: Tag name of your release(please include "v")
    #     required: true

jobs:

  Publish-Release:
    runs-on: ubuntu-latest
    steps:
      - name: New Release Publish
        id: new_publish
        uses: release-drafter/release-drafter@v5
        with:
          publish : true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}

    outputs:
      release_id: ${{ steps.new_publish.outputs.id }}
      release_name: ${{ steps.new_publish.outputs.tag_name }}

  Deploy-ECS:
    needs: Publish-Release
    environment: aha-uat
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed "s/\\//-/g")" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "repo_name=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')" >> $GITHUB_OUTPUT

      - name: Another step
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"
          echo "Repo: ${{ steps.vars.outputs.repo_name }}"


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy env file
        run: aws s3 cp s3://${{ secrets.ENV_FILE_BUCKET_PATH }}/.env ./.env

      - name: Copy constant file
        run: aws s3 cp s3://${{ secrets.CONSTANT_FILE_BUCKET_PATH }}/constants.ts ./src/lib

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
              ORIGIN=${{ env.ORIGIN }}
              ENVIRONMENT=aha-uat
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/rean-admin-portal-aha-uat:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINTION_NAME }} \
          --query taskDefinition > task-definition.json

      - name: New image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: task-definition.json
            container-name: default
            image: ${{ steps.login-ecr.outputs.registry }}/rean-admin-portal-aha-uat:${{ steps.vars.outputs.branch }}_${{ steps.vars.outputs.sha_short }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

      - name: Task Definition Variable
        id: taskdefintionvar
        shell: bash
        run: |
            # echo "::set-output name=task_definition_arn::$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINTION_NAME }} | jq '.[] | .taskDefinitionArn')"
            echo "task_definition_arn=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINTION_NAME }} | jq '.[] | .taskDefinitionArn')" >> $GITHUB_OUTPUT

      - name: Task Defintion ARN
        run: |
          echo "Task Defintion: ${{ steps.taskdefintionvar.outputs.task_definition_arn }}"

      - name: Deploy Amazon ECS task definition using Duplo API
        uses: fjogeleit/http-request-action@master
        with:
          url: 'https://reanfoundation.duplocloud.net/subscriptions/${{ secrets.DUPLO_ID }}/UpdateEcsService'
          method: 'POST'
          data: '{"TaskDefinition":${{ steps.taskdefintionvar.outputs.task_definition_arn }},"Name": "${{ secrets.SERVICE_NAME }}","Replicas":1, "HealthCheckGracePeriodSeconds": 1200, "DnsPrfx": ""}'
          bearerToken: ${{ secrets.DUPLOCLOUD_TOKEN }}
